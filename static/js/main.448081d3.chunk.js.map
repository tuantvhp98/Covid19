{"version":3,"sources":["components/infobox/index.jsx","components/LineChart/index.jsx","components/map/index.jsx","components/home/index.jsx","components/footer/index.jsx","App.js","serviceWorker.js","index.js"],"names":["InfoBox","props","num","label","total","numToday","icon","color","changeClick","background","className","style","borderTop","cursor","onClick","width","src","alt","fontWeight","fontSize","numeral","parseInt","format","defaultProps","LineChart","useState","listdata","setListData","listDaydata","setListDayData","useEffect","a","Axios","get","then","res","data","cases","deaths","recovered","todayCases","todayDeaths","todayRecovered","getdata","display","maxWidth","labels","datasets","backgroundColor","Img","styled","img","casesTypeColor","hex","multiplier","MapBox","zoom","center","countries","caseType","showData","border","borderRadius","height","marginTop","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","radius","Math","sqrt","onMouseOver","e","target","openPopup","onMouseOut","closePopup","Popup","flag","showDataMap","sortData","sort","b","Home","list","setList","listTotal","setTotalList","selectedOption","setSelectedOption","selectedName","setSelectedName","dataAll","setDataAll","setCenter","setZoom","mapCountries","setMapCountries","setCaseType","axios","value","iso2","allCountries","name","code","push","catch","console","log","getData","placeholder","onChange","options","index","key","handleOnClickList","margin","STFooter","div","Footer","MenuLink","to","activeExtract","path","exact","children","active","match","App","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.448081d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport numeral from 'numeral';\r\n\r\nInfoBox.propTypes = {\r\n    label: PropTypes.string,\r\n    total: PropTypes.number,\r\n    numToday: PropTypes.number,\r\n    icon: PropTypes.string,\r\n    color:PropTypes.string,\r\n    changeClick:PropTypes.func,\r\n    background:PropTypes.string,\r\n};\r\nconst convertNum = (num) => {\r\n    const a = num ? numeral(parseInt(num)).format('0.0a') : '0';\r\n    return a\r\n}\r\nInfoBox.defaultProps = {\r\n    label: \"\",\r\n    total: 0,\r\n    numToday: 0,\r\n    icon: '',\r\n    color:'',\r\n    changeClick:null,\r\n    background:'',\r\n}\r\n\r\nfunction InfoBox(props) {\r\n    const { label, total, numToday, icon, color, changeClick, background } = props;\r\n    const handleChangClick = () =>{\r\n        if(changeClick){\r\n            changeClick()\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"info\" style={{borderTop:`5px solid ${background}`, cursor:'pointer'}} onClick={handleChangClick}>\r\n            <div className=\"info-icon\">\r\n                <img style={{width: '45px'}} src={icon} alt=\"\" />\r\n            </div>\r\n            <div className=\"info-body\">\r\n                <p style={{ fontWeight: 'bold', fontSize: \"17px\",color: color }}>{label}</p>\r\n                <p style={{ fontWeight: 'bold', color: color, fontSize: \"30px\" }}>+{numToday}</p>\r\n                <p style={{ fontWeight: 'bold', color: '#898585', fontSize:'15px' }}>{convertNum(total)} tổng số</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoBox;","import React, { useState, useEffect } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import { Line } from 'react-chartjs-2';\r\nimport Axios from 'axios';\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nfunction LineChart(props) {\r\n    const [listdata, setListData] = useState([])\r\n    const [listDaydata, setListDayData] = useState([])\r\n    useEffect(() => {\r\n        const url = 'https://disease.sh/v3/covid-19/all';\r\n        const getdata = async () => {\r\n            await Axios.get(url).then(res => {\r\n                let data = res.data;\r\n                setListData([data.cases, data.deaths, data.recovered])\r\n                setListDayData([data.todayCases, data.todayDeaths, data.todayRecovered])\r\n            })\r\n        }\r\n        getdata()\r\n    }, [])\r\n    return (\r\n        <div style={{ display: \"flex\", maxWidth: \"50%\" }}>\r\n            <Doughnut\r\n                data={{\r\n                    labels: ['Số ca nhiễm', 'Số người chết', \"Số phục hồi\"],\r\n                    datasets: [\r\n                        {\r\n                            label: \"Population (millions)\",\r\n                            backgroundColor: [\r\n                                \"red\",\r\n                                \"black\",\r\n                                \"#6edc64\",\r\n                            ],\r\n                            data: listdata\r\n                        }\r\n                    ]\r\n                }}\r\n            />\r\n            <Bar\r\n                data={{\r\n                    labels: ['Số ca nhiễm trong ngày', 'Số người chết trong ngày', \"Số phục hồi trong ngày\"],\r\n                    datasets: [\r\n                        {\r\n                            label: \"Population (millions)\",\r\n                            backgroundColor: [\r\n                                \"red\",\r\n                                \"black\",\r\n                                \"#6edc64\",\r\n                            ],\r\n                            data: listDaydata\r\n                        }\r\n                    ]\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineChart;","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import numeral from \"numeral\";\r\n// import mapboxgl from 'mapbox-gl';\r\n// import MapboxCircle from 'mapbox-gl-circle';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport styled from 'styled-components';\r\n\r\nconst Img = styled.img`\r\n    width:100%;\r\n    height:70px;\r\n    margin-right:15px;\r\n    border-radius:5px;\r\n    box-shadow:0 2px 20px rgba(0,0,0,0.1);\r\n    display: flex;\r\n    text-align: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\nMapBox.propTypes = {\r\n    zoom: PropTypes.number,\r\n    center: PropTypes.array,\r\n    countries: PropTypes.array,\r\n    caseType: PropTypes.string,\r\n    showData:PropTypes.bool,\r\n};\r\nconst casesTypeColor = {\r\n    cases: {\r\n        hex: \"black\",\r\n        multiplier: 200000,\r\n    },\r\n    recovered: {\r\n        hex: \"#6edc64\",\r\n        multiplier: 520000,\r\n    },\r\n    deaths: {\r\n        hex: \"red\",\r\n        multiplier: 820000,\r\n    },\r\n}\r\nMapBox.defaultProps = {\r\n    zoom: 3,\r\n    center: [51.505, -0.09],\r\n    countries: null,\r\n    caseType: \"cases\",\r\n    showData:false,\r\n}\r\nconst showDataMap = (data, caseType = \"cases\", showdata) => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColor[caseType].hex}\r\n            radius={\r\n                Math.sqrt(parseInt(country[caseType]) * parseInt(casesTypeColor[caseType].multiplier))\r\n            }\r\n    \r\n            onMouseOver={(e) => {\r\n                e.target.openPopup();\r\n            }}\r\n            onMouseOut={(e) => {\r\n                e.target.closePopup();\r\n            }}\r\n        >\r\n            <Popup className=\"map-popup\">\r\n                <p className=\"info-map\"><Img src={country.countryInfo.flag}></Img></p>\r\n                <p style={{ fontSize: '15px', fontWeight: 'bold' }} className=\"info-map\">{country.country}</p>\r\n                <p className=\"info-map\">Số ca nhiễm: {country.cases}</p>\r\n                <p className=\"info-map\">Số người chết: {country.deaths}</p>\r\n                <p className=\"info-map\">Số phục hồi: {country.recovered}</p>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\nconst style = {\r\n    border: '10px solid #797979',\r\n    borderRadius: '0 2px 20px rgba(0,0,0,0.1)',\r\n    height: '55vh',\r\n    width: '100%',\r\n    marginTop: '20px',\r\n}\r\nfunction MapBox(props) {\r\n    const { center, zoom, caseType, countries } = props;\r\n    useEffect(() => {\r\n        // mapboxgl.accessToken = 'IqzJukzUWpWrcDHJeDpUPLSGndDx';\r\n        // const map = new mapboxgl.Map({\r\n        //     container: 'map',\r\n        //     style: 'https://apis.wemap.asia/vector-tiles/styles/osm-bright/style.json?key=IqzJukzUWpWrcDHJeDpUPLSGndDx',\r\n        //     center: [106.631478, 10.826952],\r\n        //     zoom: 1,\r\n        // });\r\n        // let myCircle = new MapboxCircle({lat: 39.984, lng: -75.343}, 25000, {\r\n        //     editable: true,\r\n        //     minRadius: 1500,\r\n        //     fillColor: '#29AB87'\r\n        // }).addTo(map);\r\n        // myCircle.on('contextmenu', function (mapMouseEvent) {\r\n        //     console.log('Right-click:', mapMouseEvent.lngLat);\r\n        // });\r\n    }, [])\r\n    \r\n    return (\r\n        <div className=\"map\" style={style}>\r\n            {/* <div style={{ width: \"100%\", height: '100%'}} id=\"map\"></div> */}\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                />\r\n                {showDataMap(countries, caseType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapBox;","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport InfoBox from '../infobox';\r\nimport LineChart from '../LineChart';\r\nimport MapBox from '../map';\r\nimport styled from 'styled-components';\r\n// import numeral from 'numeral';\r\nimport \"leaflet/dist/leaflet.css\";\r\nconst Img = styled.img`\r\n    width:50px;\r\n    height:30px;\r\n    margin-right:15px;\r\n    border-radius:5px;\r\n    box-shadow:0 2px 20px rgba(0,0,0,0.1);\r\n`\r\n// const convertNum = (num) => {\r\n//     const a = num ? numeral(parseInt(num)).format('$0,0.00') : '0';\r\n//     return a\r\n// }\r\nHome.propTypes = {\r\n    list: PropTypes.array,\r\n};\r\nconst sortData = (data) => {\r\n    let a = [...data];\r\n    a.sort((a, b) => {\r\n        if (a.total > b.total) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return a;\r\n}\r\nfunction Home(props) {\r\n    const [list, setList] = useState([]);\r\n    const [listTotal, setTotalList] = useState([]);\r\n    const [selectedOption, setSelectedOption] = useState('All');\r\n    const [selectedName, setSelectedName] = useState('Worldwide');\r\n    const [dataAll, setDataAll] = useState({});\r\n    const [center, setCenter] = useState([20, 77]);\r\n    const [zoom, setZoom] = useState(3);\r\n    const [mapCountries, setMapCountries] = useState([])\r\n    const [caseType, setCaseType] = useState('cases')\r\n    const handleChange = (e) => {\r\n        setSelectedOption(e.value)\r\n        setSelectedName(e.label)\r\n        setZoom(4)\r\n    }\r\n    const handleChangDeaths = () => {\r\n        setCaseType('deaths');\r\n\r\n    }\r\n    const handleChangCases = () => {\r\n        setCaseType('cases');\r\n    }\r\n    const handleChangRecovered = () => {\r\n        setCaseType('recovered');\r\n    }\r\n    const handleOnClickList = (selectedOption, name) => {\r\n        setSelectedOption(selectedOption)\r\n        setSelectedName(name)\r\n        setZoom(4)\r\n    }\r\n    useEffect(() => {\r\n\r\n        const getData = async () => {\r\n            await axios.get('https://disease.sh/v3/covid-19/countries')\r\n                .then(res => {\r\n                    const data = res.data;\r\n                    const countries = data.map(e => ({\r\n                        label: e.country,\r\n                        value: e.countryInfo.iso2,\r\n                    }))\r\n                    const allCountries = data.map(e => ({\r\n                        name: e.country,\r\n                        total: e.cases,\r\n                        flag: e.countryInfo.flag,\r\n                        code: e.countryInfo.iso2,\r\n                    }))\r\n                    countries.push({ label: 'Worldwide', value: \"All\" })\r\n                    setList(countries)\r\n                    setMapCountries(data)\r\n                    setTotalList(sortData(allCountries))\r\n\r\n                }).catch(e => {\r\n                    console.log(e)\r\n                })\r\n        }\r\n        getData()\r\n    }, [caseType])\r\n    useEffect(() => {\r\n        const url = selectedOption === 'All' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${selectedOption}`;\r\n        const getdata = async () => {\r\n            await axios.get(url).then(res => {\r\n                setDataAll(res.data)\r\n                if (selectedOption !== 'All') {\r\n                    setCenter([res.data.countryInfo.lat, res.data.countryInfo.long])\r\n                }\r\n\r\n            })\r\n        }\r\n        getdata()\r\n    }, [selectedOption])\r\n    return (\r\n        <div>\r\n\r\n\r\n            <div className=\"container\">\r\n                <div className=\"tracks\">\r\n                    <div className=\"title\">\r\n                        <h2>Thông tin Covid trên thế giới</h2>\r\n                        <div className=\"select-country\">\r\n                            <Select\r\n                                value={selectedOption}\r\n                                placeholder={selectedName}\r\n                                onChange={handleChange}\r\n                                options={list}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"all-info\">\r\n                            <InfoBox background={caseType === 'cases' ? \"black\" : 'white'} changeClick={handleChangCases} color=\"black\" icon=\"https://img.icons8.com/ios/50/000000/coronavirus.png\" label=\"Số ca nhiễm\" numToday={dataAll.todayCases} total={dataAll.cases}></InfoBox>\r\n                            <InfoBox background={caseType === 'deaths' ? \"red\" : 'white'} changeClick={handleChangDeaths} color=\"red\" icon=\"./assets/img/deaths.svg\" label=\"Số người chết\" numToday={dataAll.todayDeaths} total={dataAll.deaths}></InfoBox>\r\n                            <InfoBox background={caseType === 'recovered' ? \"#6edc64\" : 'white'} changeClick={handleChangRecovered} color=\"#6edc64\" icon=\"https://img.icons8.com/color/48/000000/recovery.png\" label=\"Số phục hồi\" numToday={dataAll.todayRecovered} total={dataAll.recovered}></InfoBox>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"map\">\r\n                        <MapBox countries={mapCountries} zoom={zoom} center={center} caseType={caseType}></MapBox>\r\n                    </div>\r\n                </div>\r\n                <div className=\"case-total\">\r\n                    <div className=\"num-covid\">\r\n                        <h2>Số ca nhiễm các nước trên thế giới</h2>\r\n                        <ul className=\"list-cases\">\r\n                            {\r\n                                listTotal.map((e, index) => {\r\n                                    return (\r\n                                        <li className='list-total' key={index} onClick={() => handleOnClickList(e.code, e.name)}>\r\n                                            <p style={{ display: 'flex' }}><Img src={e.flag}></Img> {e.name}</p> <p>{e.total}</p>\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div className=\"container\" style={{ margin: \"20px 0\" }}>\r\n\r\n                <div className=\"chart\">\r\n                    <h2>Thống kê</h2>\r\n                    <LineChart></LineChart>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst STFooter = styled.div`\r\n    position: relative;\r\n    background: #2e3a49;\r\n    color:white;\r\n    width: 100%;\r\n    height: 70px;\r\n    bottom: 0px;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-items: center;\r\n    justify-content: center;\r\n`\r\nfunction Footer(props) {\r\n    return (\r\n        <STFooter >\r\n            <h4>Design by narTuan</h4>\r\n        </STFooter>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Home from './components/home';\nimport Footer from './components/footer';\n\nconst MenuLink = ({ label, to, activeExtract }) => {\n  return (\n    <Route path={to} exact={activeExtract} children={({ match }) => {\n      let active = match ? 'active' : '';\n      return (\n        <li className={`my-li ${active}`}>\n          <Link className=\"my-link\" to={to}>{label}</Link>\n        </li>\n      )\n    }}\n\n    />\n  )\n}\nfunction App() {\n  return (\n    <Router>\n      <ul className=\"nav-bar\">\n        <MenuLink to=\"/\" label=\"Home\" activeExtract={true} />\n        <MenuLink to=\"/about\" label=\"About\" />\n      </ul>\n      <Switch>\n        <Route path=\"/\" exact></Route>\n        <Route path=\"/about\" component={Home}></Route>\n        \n      </Switch>\n      <Footer></Footer>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}